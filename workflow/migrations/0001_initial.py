# Generated by Django 2.0.7 on 2018-09-26 08:38

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CoreSites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('privacy_disclaimer', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(blank=True, null=True)),
                ('updated', models.DateTimeField(blank=True, null=True)),
                ('whitelisted_domains', models.TextField(blank=True, null=True, verbose_name='Whitelisted Domains')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
            options={
                'verbose_name': 'Core Site',
                'verbose_name_plural': 'Core Sites',
            },
        ),
        migrations.CreateModel(
            name='CoreUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('core_user_uuid', models.CharField(default=uuid.uuid4, max_length=255, unique=True, verbose_name='CoreUser UUID')),
                ('title', models.CharField(blank=True, choices=[('mr', 'Mr.'), ('mrs', 'Mrs.'), ('ms', 'Ms.')], max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Given Name')),
                ('contact_info', models.CharField(blank=True, max_length=255, null=True)),
                ('privacy_disclaimer_accepted', models.BooleanField(default=False)),
                ('filter', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(blank=True, help_text='ISO Country Name', max_length=255, verbose_name='Country Name')),
                ('code', models.CharField(blank=True, help_text='ISO Country Code', max_length=4, verbose_name='2 Letter Country Code')),
                ('description', models.TextField(blank=True, help_text='Description of use for country', max_length=765, verbose_name='Description/Notes')),
                ('latitude', models.CharField(blank=True, help_text='Mapping data Y axis', max_length=255, null=True, verbose_name='Latitude')),
                ('longitude', models.CharField(blank=True, help_text='Mapping data X axis', max_length=255, null=True, verbose_name='Longitude')),
                ('zoom', models.IntegerField(default=5, help_text='Zoom level for mapping services', verbose_name='Zoom')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ('country',),
            },
        ),
        migrations.CreateModel(
            name='HistoricalWorkflowLevel2',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='Description of the workflow level use', null=True, verbose_name='Description')),
                ('level2_uuid', models.CharField(blank=True, db_index=True, default=uuid.uuid4, editable=False, help_text='Unique ID', max_length=255, verbose_name='WorkflowLevel2 UUID')),
                ('name', models.CharField(help_text='Name of workflow level as it relates to workflow level 1', max_length=255, verbose_name='Name')),
                ('notes', models.TextField(blank=True, null=True)),
                ('parent_workflowlevel2', models.IntegerField(blank=True, default=0, help_text='Workflow level 2 can relate to another workflow level 2 creating multiple levels of relationships', verbose_name='Parent')),
                ('short_name', models.CharField(blank=True, help_text='Shortened name autogenerated', max_length=20, null=True, verbose_name='Code')),
                ('create_date', models.DateTimeField(blank=True, null=True, verbose_name='Date Created')),
                ('edit_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Edit Date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Workflow Level 2',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='Humanitec', max_length=255, verbose_name='Industry Name')),
                ('description', models.TextField(blank=True, max_length=765, null=True, verbose_name='Description/Notes')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Indistires',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Internationalization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(blank=True, max_length=100, null=True, verbose_name='Language')),
                ('language_file', django.contrib.postgres.fields.jsonb.JSONField()),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('language',),
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A Milestone can be associated with a workflow level as time marked goal', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Purpose of the Milestone', null=True)),
                ('milestone_start_date', models.DateTimeField(blank=True, help_text='Milestone can have a single date associated with start date or a start and end date', null=True)),
                ('milestone_end_date', models.DateTimeField(blank=True, help_text='Optional End of milestone period', null=True)),
                ('is_global', models.BooleanField(default=0, help_text='A Global appears for all organizations')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization_uuid', models.CharField(default=uuid.uuid4, max_length=255, unique=True, verbose_name='Organization UUID')),
                ('name', models.CharField(blank=True, default='Humanitec', help_text='Each end user must be grouped into an organization', max_length=255, verbose_name='Organization Name')),
                ('description', models.TextField(blank=True, help_text='Descirption of organization', max_length=765, null=True, verbose_name='Description/Notes')),
                ('organization_url', models.CharField(blank=True, help_text='Link to organizations external web site', max_length=255, null=True)),
                ('level_1_label', models.CharField(blank=True, default='Program', help_text='Label to display if needed for workflow i.e. Top Level Navigation, Primary, Program, etc. ', max_length=255, verbose_name='Workflow Level 1 label')),
                ('level_2_label', models.CharField(blank=True, default='Project', help_text='Label to display if needed for workflow i.e. Second Level Navigation, Major,  Project, etc. ', max_length=255, verbose_name='Workflow Level 2 label')),
                ('level_3_label', models.CharField(blank=True, default='Component', help_text='Label to display if needed for workflow i.e. Third Level Navigation, Minor,  Activity, etc. ', max_length=255, verbose_name='Workflow Level 3 label')),
                ('level_4_label', models.CharField(blank=True, default='Activity', help_text='Label to display if needed for workflow i.e. Fourth Level Navigation, Sub,  Sub-Activity, etc. ', max_length=255, verbose_name='Workflow Level 4 label')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('subscription_id', models.CharField(blank=True, max_length=50, null=True)),
                ('used_seats', models.IntegerField(blank=True, default=0, null=True)),
                ('oauth_domains', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True, verbose_name='OAuth Domains'), blank=True, null=True, size=None)),
                ('date_format', models.CharField(blank=True, default='DD.MM.YYYY', max_length=50, verbose_name='Date Format')),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('industry', models.ManyToManyField(blank=True, help_text='Type of Industry the organization belongs to if any', to='workflow.Industry')),
            ],
            options={
                'verbose_name_plural': 'Organizations',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='LogicModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_uuid', models.CharField(default=uuid.uuid4, max_length=255, unique=True, verbose_name='Logic Module UUID')),
                ('name', models.CharField(blank=True, default='TolaData', max_length=255, verbose_name='Logic Module Name')),
                ('description',
                 models.TextField(blank=True, max_length=765, null=True, verbose_name='Description/Notes')),
                ('endpoint', models.CharField(blank=True, max_length=255, null=True)),
                ('github_repo', models.CharField(blank=True, max_length=500, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'Logic Modules',
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Portfolio/folder label displayed in list views', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Describe the purpose or use case for this Portfolio collection', null=True)),
                ('is_global', models.BooleanField(default=0, help_text='A Global appears for all organizations')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('country', models.ManyToManyField(blank=True, help_text='Country Location if needed', to='workflow.Country')),
                ('organization', models.ForeignKey(blank=True, help_text='Related Organization that created portfolio', null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.Organization')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='WorkflowLevel1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level1_uuid', models.CharField(default=uuid.uuid4, editable=False, max_length=255, unique=True, verbose_name='WorkflowLevel1 UUID')),
                ('unique_id', models.CharField(blank=True, help_text='User facing unique ID field if needed', max_length=255, null=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="Top level workflow can have child workflowleves, name it according to it's grouping of children", max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Describe how this collection of related workflows are used', max_length=765, null=True, verbose_name='Description')),
                ('start_date', models.DateTimeField(blank=True, help_text='If required a time span can be associated with workflow level', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='If required a time span can be associated with workflow level', null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('sort', models.IntegerField(default=0)),
                ('country', models.ManyToManyField(blank=True, help_text='Optional Country location', to='workflow.Country')),
                ('milestone', models.ManyToManyField(blank=True, help_text='Set of milestones or stated goals and dates for work', to='workflow.Milestone')),
                ('organization', models.ForeignKey(blank=True, help_text='Related Org to associate with', null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.Organization')),
                ('portfolio', models.ForeignKey(blank=True, help_text='Combine with a set or other level 1s for folder like structure', null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.Portfolio')),
                ('user_access', models.ManyToManyField(blank=True, to='workflow.CoreUser')),
            ],
            options={
                'verbose_name': 'Workflow Level 1',
                'verbose_name_plural': 'Workflow Level 1',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='WorkflowLevel2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='Description of the workflow level use', null=True, verbose_name='Description')),
                ('level2_uuid', models.CharField(blank=True, default=uuid.uuid4, editable=False, help_text='Unique ID', max_length=255, unique=True, verbose_name='WorkflowLevel2 UUID')),
                ('name', models.CharField(help_text='Name of workflow level as it relates to workflow level 1', max_length=255, verbose_name='Name')),
                ('notes', models.TextField(blank=True, null=True)),
                ('parent_workflowlevel2', models.IntegerField(blank=True, default=0, help_text='Workflow level 2 can relate to another workflow level 2 creating multiple levels of relationships', verbose_name='Parent')),
                ('short_name', models.CharField(blank=True, help_text='Shortened name autogenerated', max_length=20, null=True, verbose_name='Code')),
                ('create_date', models.DateTimeField(blank=True, null=True, verbose_name='Date Created')),
                ('edit_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Edit Date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflowlevel2', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(blank=True, help_text='Association with a Milestone', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workflow.Milestone')),
                ('workflowlevel1', models.ForeignKey(help_text='Primary or parent Workflow', on_delete=django.db.models.deletion.CASCADE, related_name='workflowlevel2', to='workflow.WorkflowLevel1', verbose_name='Program')),
            ],
            options={
                'verbose_name': 'Workflow Level 2',
                'verbose_name_plural': 'Workflow Level 2',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='WorkflowLevel2Sort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workflowlevel2_id', models.IntegerField(default=0, verbose_name='ID to be Sorted')),
                ('sort_array', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Sorted JSON array of workflow levels', null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('workflowlevel1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.WorkflowLevel1')),
                ('workflowlevel2_parent_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.WorkflowLevel2')),
            ],
            options={
                'verbose_name': 'Workflow Level Sort',
                'verbose_name_plural': 'Workflow Level Sort',
                'ordering': ('workflowlevel1', 'workflowlevel2_id'),
            },
        ),
        migrations.CreateModel(
            name='WorkflowTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(blank=True, help_text='If required a time span can be associated with workflow level access', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='If required a time span can be associated with workflow level access expiration', null=True)),
                ('status', models.CharField(blank=True, help_text='Active status of access', max_length=255, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('role', models.ForeignKey(blank=True, help_text='Type of access via related group', null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('workflow_user', models.ForeignKey(blank=True, help_text='User with access/permissions to related workflowlevels', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auth_approving', to='workflow.CoreUser')),
                ('workflowlevel1', models.ForeignKey(blank=True, help_text='Related workflowlevel 1', null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.WorkflowLevel1')),
            ],
            options={
                'verbose_name': 'Workflow Team',
                'verbose_name_plural': 'Workflow Teams',
                'ordering': ('workflow_user',),
            },
        ),
        migrations.AddField(
            model_name='milestone',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='Related Organization that created portfolio', null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.Organization'),
        ),
        migrations.AddField(
            model_name='historicalworkflowlevel2',
            name='milestone',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='workflow.Milestone'),
        ),
        migrations.AddField(
            model_name='historicalworkflowlevel2',
            name='workflowlevel1',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='workflow.WorkflowLevel1'),
        ),
        migrations.AddField(
            model_name='coreuser',
            name='countries',
            field=models.ManyToManyField(blank=True, related_name='countries', to='workflow.Country', verbose_name='Accessible Countries'),
        ),
        migrations.AddField(
            model_name='coreuser',
            name='organization',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow.Organization'),
        ),
        migrations.AddField(
            model_name='coreuser',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='core_user', to=settings.AUTH_USER_MODEL),
        ),
    ]
